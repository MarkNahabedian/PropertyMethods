var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PropertyMethods","category":"page"},{"location":"#PropertyMethods","page":"Home","title":"PropertyMethods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Suppose a type needs to define non-field properties.  This might be because it needs to implement some of the properties of another type to whose interface it must conform.  The Delegation pattern is an example.  There could be other reasons why some properties need to be computed rather than directly read.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here is an example, though somewhat contrived:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PropertyMethods\n\nmutable struct Rectangle\n    x\n    y\n    width\n    height\nend\n\nmutable struct OffsetRectangle\n    rect\n    x_offset\n    y_offset\nend\n\nBase.getproperty(r::OffsetRectangle, ::Val{:x}) =\n    r.x_offset + r.rect.x\n\nBase.getproperty(r::OffsetRectangle, ::Val{:y}) =\n    r.y_offset + r.rect.y\n\nBase.getproperty(r::OffsetRectangle, ::Val{:width}) =\n    r.rect.width\n\nBase.getproperty(r::OffsetRectangle, ::Val{:height}) =\n    r.rect.height\n\n@property_trampolines OffsetRectangle","category":"page"},{"location":"","page":"Home","title":"Home","text":"@property_trampolines is necessary to define some additional methods:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MacroTools\n\nMacroTools.striplines(@macroexpand @property_trampolines OffsetRectangle)","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nrect1 = Rectangle(0, 1, 2, 4)\n\norect = OffsetRectangle(rect1, 2, 2)\n\nfor prop in propertynames(orect)\n    println(prop, '\\t', getproperty(orect, prop))\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some of the getproperty methods we defined just trampoline to the value of the OffsetRectangle's rect field.  This is just boilerplate.  We can do better:","category":"page"},{"location":"","page":"Home","title":"Home","text":"MacroTools.striplines(@macroexpand @delegate Rectangle rect width height)","category":"page"},{"location":"","page":"Home","title":"Home","text":"So, instead of explicitly coding the OffsetRectangle methods for the width and height fields, we can write","category":"page"},{"location":"","page":"Home","title":"Home","text":"@delegate Rectangle rect width height","category":"page"},{"location":"","page":"Home","title":"Home","text":"orect.width","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Definitions","page":"Home","title":"Definitions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [PropertyMethods]","category":"page"},{"location":"#PropertyMethods.propertynames_from_val_methods-Tuple{Type, Bool}","page":"Home","title":"PropertyMethods.propertynames_from_val_methods","text":"propertynames_from_val_methods(t::Type, private::Bool)\n\nCompute and return the propertynames for type t from its fields and Val specialized methods.\n\n\n\n\n\n","category":"method"},{"location":"#PropertyMethods.@delegate-Tuple{Any, Any, Vararg{Any}}","page":"Home","title":"PropertyMethods.@delegate","text":"@delegate from_type to_field properties...\n\nDefines getproperty methods on from_type that for each of the enumerated properties that will return the value of that property from a from_type instance's to_field.\n\n\n\n\n\n","category":"macro"},{"location":"#PropertyMethods.@property_trampolines-Tuple{Any}","page":"Home","title":"PropertyMethods.@property_trampolines","text":"@property_trampolines MyStruct\n\nDefine the methods necessary so that Val specialized getproperty methods for MyStruct will find Val specialized properties.\n\n\n\n\n\n","category":"macro"}]
}
